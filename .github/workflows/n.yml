name: Convert TensorFlow Model to Core ML and Create PR

on:
  workflow_dispatch:
  push:
    branches:
      - main

jobs:
  convert-and-pr:
    runs-on: ubuntu-latest

    steps:
      # Checkout the repository
      - name: Checkout repository
        uses: actions/checkout@v4

      # Set up Python environment
      - name: Set up Python
        uses: actions/setup-python@v5
        with:
          python-version: '3.8' # Stick with 3.8 for TF 2.5.0

      # Install system dependencies
      - name: Install system dependencies
        run: |
          sudo apt-get update
          sudo apt-get install -y libpython3-dev  # For coremltools bindings

      # Install dependencies
      - name: Install dependencies
        run: |
          python -m pip install --upgrade pip
          # Install TensorFlow first to pull its core deps (six, absl-py, etc.)
          pip install tensorflow==2.5.0
          # Pin specific versions for compatibility
          pip install numpy==1.19.5 typing-extensions==3.7.4 --force-reinstall
          pip install protobuf==3.20.3 tf2onnx==1.16.1
          # Explicitly install six and coremltools dependencies
          pip install six absl-py==0.15.0 astunparse==1.6.3
          # Install coremltools last, ensure it builds
          pip install coremltools==7.2
          # Verify installed versions
          pip list | grep -E "numpy|typing-extensions|tensorflow|coremltools|tf2onnx|protobuf|six|absl-py|astunparse"

      # Create conversion script
      - name: Create conversion script
        run: |
          cat << 'EOF' > convert_model.py
          import coremltools as ct
          import tensorflow as tf
          import tf2onnx
          import onnx
          import os

          # Load TensorFlow SavedModel
          try:
              model = tf.saved_model.load('./', tags=['train'])
              print("TensorFlow model loaded")
              concrete_func = model.signatures['tokens']
              print(f"Concrete function: {concrete_func}")
              print(f"Input spec: {concrete_func.structured_input_signature}")
              
              # Convert to ONNX
              model_proto, _ = tf2onnx.convert.from_function(
                  concrete_func,
                  input_signature=concrete_func.structured_input_signature[1],
                  output_path='model.onnx'
              )
              print("Converted to ONNX: model.onnx")
          except Exception as e:
              print(f"Error converting to ONNX: {str(e)}")
              raise

          # Convert ONNX to Core ML
          try:
              mlmodel = ct.convert(
                  'model.onnx',
                  inputs=[
                      ct.TensorType(name='input_ids', shape=(1, 128), dtype=tf.int32),
                      ct.TensorType(name='input_mask', shape=(1, 128), dtype=tf.int32),
                      ct.TensorType(name='segment_ids', shape=(1, 128), dtype=tf.int32)
                  ],
                  source='onnx'
              )
              print("Converted to Core ML")
              print("Inputs:")
              for input_desc in mlmodel.input_description:
                  print(f"  {input_desc}")
          except Exception as e:
              print(f"Error converting to Core ML: {str(e)}")
              raise

          # Save Core ML model
          try:
              mlmodel.save('model.mlmodel')
              print("Saved as model.mlmodel")
          except Exception as e:
              print(f"Error saving Core ML model: {str(e)}")
              raise
          EOF

      # Run the conversion script
      - name: Run conversion script
        run: |
          python convert_model.py

      # Configure git
      - name: Setup git config
        run: |
          git config user.name "GitHub Action"
          git config user.email "action@github.com"

      # Create branch, commit, and push
      - name: Create branch and commit
        run: |
          git checkout -b feature/convert-to-mlmodel-$(date +%Y%m%d-%H%M%S)
          git add model.mlmodel
          git commit -m "Convert TensorFlow NLP model to Core ML via ONNX" || echo "No changes to commit"
          git push origin HEAD

      # Create Pull Request
      - name: Create Pull Request
        uses: peter-evans/create-pull-request@v5
        with:
          token: ${{ secrets.GITHUB_TOKEN }}
          branch: feature/convert-to-mlmodel-$(date +%Y%m%d-%H%M%S)
          title: "Convert TensorFlow NLP Model to Core ML Format via ONNX"
          body: |
            Converts TensorFlow NLP model (BERT-based) to Core ML via ONNX.
            Uses TensorFlow 2.5.0, tf2onnx 1.16.1, coremltools 7.2, Python 3.8.
          commit-message: "Add converted Core ML model (model.mlmodel)"