name: Convert TensorFlow Model to Core ML and Create PR

on:
  workflow_dispatch: # Allows manual triggering
  push:
    branches:
      - main

jobs:
  convert-and-pr:
    runs-on: ubuntu-latest

    steps:
      # Checkout the repository
      - name: Checkout repository
        uses: actions/checkout@v4

      # Set up Python environment
      - name: Set up Python
        uses: actions/setup-python@v5
        with:
          python-version: '3.9' # Python 3.9 for coremltools 7.2 compatibility

      # Install dependencies (TensorFlow 2.5.0, coremltools 7.2, and compatible versions)
      - name: Install dependencies
        run: |
          python -m pip install --upgrade pip
          pip install numpy==1.23.5  # Compatible with TF 2.5.0 and coremltools 7.2
          pip install tensorflow==2.5.0
          pip install coremltools==7.2
          pip install protobuf==3.20.3  # Compatible with TF 2.5.0

      # Create a Python script for conversion
      - name: Create conversion script
        run: |
          cat << 'EOF' > convert_model.py
          import coremltools as ct
          import tensorflow as tf
          import os

          # Load the TensorFlow SavedModel from root directory with 'train' tag
          try:
              loaded = tf.saved_model.load('./', tags=['train'])
              print("TensorFlow model loaded successfully from root directory with 'train' tag")
          except Exception as e:
              print(f"Error loading TensorFlow model: {e}")
              exit(1)

          # Get the concrete function from the loaded model
          try:
              concrete_func = loaded.signatures['tokens']
              print("Concrete function extracted successfully using 'tokens' signature")
              print(f"Input spec: {concrete_func.structured_input_signature}")
          except KeyError as e:
              print(f"Error: 'tokens' signature not found. Available signatures: {list(loaded.signatures.keys())}")
              exit(1)
          except Exception as e:
              print(f"Error getting concrete function: {e}")
              exit(1)

          # Convert to Core ML model using a list of concrete functions
          try:
              mlmodel = ct.convert(
                  [concrete_func],  # Wrap in list to match expected format
                  inputs=[
                      ct.TensorType(name='input_ids', shape=(1, 128), dtype=tf.int32),  # Keep as int32
                      ct.TensorType(name='input_mask', shape=(1, 128), dtype=tf.int32),  # Keep as int32
                      ct.TensorType(name='segment_ids', shape=(1, 128), dtype=tf.int32)  # Keep as int32
                  ],
                  source='tensorflow',
                  convert_to='mlprogram'  # Use modern Core ML format with better type support
              )
              print("Model converted to Core ML successfully")
          except Exception as e:
              print(f"Error converting to Core ML: {e}")
              exit(1)

          # Save the Core ML model in root directory
          try:
              mlmodel.save('model.mlmodel')
              print("Core ML model saved as model.mlmodel")
          except Exception as e:
              print(f"Error saving Core ML model: {e}")
              exit(1)
          EOF

      # Run the conversion script
      - name: Run conversion script
        run: |
          python convert_model.py

      # Configure git
      - name: Setup git config
        run: |
          git config user.name "GitHub Action"
          git config user.email "action@github.com"

      # Create branch, commit changes, and push
      - name: Create branch and commit
        run: |
          git checkout -b feature/convert-to-mlmodel-$(date +%Y%m%d-%H%M%S)
          git add model.mlmodel
          git commit -m "Convert TensorFlow NLP model to Core ML format" || echo "No changes to commit"
          git push origin HEAD

      # Create Pull Request
      - name: Create Pull Request
        uses: peter-evans/create-pull-request@v5
        with:
          token: ${{ secrets.GITHUB_TOKEN }}
          branch: feature/convert-to-mlmodel-$(date +%Y%m%d-%H%M%S)
          title: "Convert TensorFlow NLP Model to Core ML Format"
          body: |
            This PR converts the TensorFlow NLP model (BERT-based) in the root directory to Core ML format (.mlmodel) using the 'train' tag and 'tokens' signature.
            Uses TensorFlow 2.5.0 and coremltools 7.2 with Python 3.9, targeting 'mlprogram' format to support int32 inputs: input_ids, input_mask, segment_ids.
            Automatically generated by GitHub Actions workflow.
          commit-message: "Add converted Core ML model (model.mlmodel)"