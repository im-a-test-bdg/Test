name: Convert TensorFlow Model to Core ML and Create PR

on:
  workflow_dispatch: # Allows manual triggering
  push:
    branches:
      - main

jobs:
  convert-and-pr:
    runs-on: ubuntu-latest

    steps:
      # Checkout the repository
      - name: Checkout repository
        uses: actions/checkout@v4

      # Set up Python environment
      - name: Set up Python
        uses: actions/setup-python@v5
        with:
          python-version: '3.9' # Python 3.9 for coremltools 7.2 and tf2onnx compatibility

      # Install dependencies (TensorFlow 2.5.0, coremltools 7.2, tf2onnx, and compatible versions)
      - name: Install dependencies
        run: |
          python -m pip install --upgrade pip
          pip install numpy==1.23.5  # Compatible with TF 2.5.0, coremltools 7.2, and tf2onnx
          pip install tensorflow==2.5.0
          pip install coremltools==7.2
          pip install tf2onnx==1.16.1  # Latest version compatible with TF 2.5.0
          pip install protobuf==3.20.3  # Compatible with TF 2.5.0

      # Create a Python script for conversion
      - name: Create conversion script
        run: |
          cat << 'EOF' > convert_model.py
          import coremltools as ct
          import tensorflow as tf
          import tf2onnx
          import onnx
          import os

          # Step 1: Load the TensorFlow SavedModel and convert to ONNX
          try:
              model = tf.saved_model.load('./', tags=['train'])
              print("TensorFlow model loaded successfully from root directory with 'train' tag")
              # Get the concrete function for the 'tokens' signature
              concrete_func = model.signatures['tokens']
              print("Concrete function extracted successfully using 'tokens' signature")
              print(f"Input spec: {concrete_func.structured_input_signature}")
              
              # Convert to ONNX
              model_proto, _ = tf2onnx.convert.from_function(
                  concrete_func,
                  input_signature=concrete_func.structured_input_signature[1],  # Use the input spec
                  output_path='model.onnx'
              )
              print("Model converted to ONNX successfully, saved as model.onnx")
          except Exception as e:
              print(f"Error converting TensorFlow model to ONNX: {e}")
              exit(1)

          # Step 2: Convert ONNX to Core ML
          try:
              mlmodel = ct.convert(
                  'model.onnx',
                  inputs=[
                      ct.TensorType(name='input_ids', shape=(1, 128), dtype=tf.int32),
                      ct.TensorType(name='input_mask', shape=(1, 128), dtype=tf.int32),
                      ct.TensorType(name='segment_ids', shape=(1, 128), dtype=tf.int32)
                  ],
                  source='onnx'
              )
              print("ONNX model converted to Core ML successfully")
              # Print input descriptions for debugging
              print("Core ML model input descriptions:")
              for input_desc in mlmodel.input_description:
                  print(f"  {input_desc}")
          except Exception as e:
              print(f"Error converting ONNX to Core ML: {e}")
              exit(1)

          # Save the Core ML model in root directory
          try:
              mlmodel.save('model.mlmodel')
              print("Core ML model saved as model.mlmodel")
          except Exception as e:
              print(f"Error saving Core ML model: {e}")
              exit(1)
          EOF

      # Run the conversion script
      - name: Run conversion script
        run: |
          python convert_model.py

      # Configure git
      - name: Setup git config
        run: |
          git config user.name "GitHub Action"
          git config user.email "action@github.com"

      # Create branch, commit changes, and push
      - name: Create branch and commit
        run: |
          git checkout -b feature/convert-to-mlmodel-$(date +%Y%m%d-%H%M%S)
          git add model.mlmodel
          git commit -m "Convert TensorFlow NLP model to Core ML format via ONNX" || echo "No changes to commit"
          git push origin HEAD

      # Create Pull Request
      - name: Create Pull Request
        uses: peter-evans/create-pull-request@v5
        with:
          token: ${{ secrets.GITHUB_TOKEN }}
          branch: feature/convert-to-mlmodel-$(date +%Y%m%d-%H%M%S)
          title: "Convert TensorFlow NLP Model to Core ML Format via ONNX"
          body: |
            This PR converts the TensorFlow NLP model (BERT-based) in the root directory to Core ML format (.mlmodel) using the 'train' tag and 'tokens' signature.
            Uses TensorFlow 2.5.0, tf2onnx 1.16.1, and coremltools 7.2 with Python 3.9. Converted via ONNX to handle int32 inputs (input_ids, input_mask, segment_ids).
            Automatically generated by GitHub Actions workflow.
          commit-message: "Add converted Core ML model (model.mlmodel)"